# GFG_projects
import json
import csv
import os
import tkinter as tk
from tkinter import ttk, messagebox, filedialog

DATA_FILE = "contacts.json"

def load_contacts():
    """Load contacts from JSON file. Return list of contact dicts."""
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, list):
                return data
    except Exception as e:
        try:
            messagebox.showwarning("Load Error", f"Could not load contacts: {e}")
        except:
            pass
    return []

def save_contacts(contacts):
    """Save list of contact dicts to JSON file."""
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(contacts, f, ensure_ascii=False, indent=2)
    except Exception as e:
        messagebox.showerror("Save Error", f"Failed to save contacts: {e}")

def export_contacts_csv(contacts, path):
    """Export contacts to a CSV file at given path."""
    try:
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["Name", "Phone", "Email"])
            for c in contacts:
                writer.writerow([c.get("name",""), c.get("phone",""), c.get("email","")])
        messagebox.showinfo("Export Successful", f"Exported {len(contacts)} contacts to:\n{path}")
    except Exception as e:
        messagebox.showerror("Export Error", f"Failed to export CSV: {e}")

def normalize_name(name):
    return name.strip()

def contact_matches(contact, query):
    """Case-insensitive match on name or phone or email."""
    q = query.strip().lower()
    return q in contact.get("name","").lower() or q in contact.get("phone","").lower() or q in contact.get("email","").lower()

class ModernButton(tk.Canvas):
    """Custom button with gradient and hover effects"""
    def __init__(self, parent, text, command=None, bg_color="#6366F1", hover_color="#4F46E5", 
                 text_color="white", width=140, height=40, **kwargs):
        super().__init__(parent, width=width, height=height, bg=parent['bg'], 
                        highlightthickness=0, **kwargs)
        
        self.command = command
        self.bg_color = bg_color
        self.hover_color = hover_color
        self.text_color = text_color
        self.width = width
        self.height = height
        
        # Create rounded rectangle background
        self.bg_rect = self.create_rounded_rect(0, 0, width, height, 8, fill=bg_color)
        self.text_id = self.create_text(width/2, height/2, text=text, 
                                       fill=text_color, font=("Segoe UI", 10, "bold"))
        
        # Bind events
        self.bind("<Enter>", self.on_enter)
        self.bind("<Leave>", self.on_leave)
        self.bind("<Button-1>", self.on_click)
        
    def create_rounded_rect(self, x1, y1, x2, y2, radius, **kwargs):
        points = [x1+radius, y1,
                 x2-radius, y1,
                 x2, y1,
                 x2, y1+radius,
                 x2, y2-radius,
                 x2, y2,
                 x2-radius, y2,
                 x1+radius, y2,
                 x1, y2,
                 x1, y2-radius,
                 x1, y1+radius,
                 x1, y1]
        return self.create_polygon(points, smooth=True, **kwargs)
    
    def on_enter(self, event):
        self.itemconfig(self.bg_rect, fill=self.hover_color)
        self.configure(cursor="hand2")
        
    def on_leave(self, event):
        self.itemconfig(self.bg_rect, fill=self.bg_color)
        
    def on_click(self, event):
        if self.command:
            self.command()

class ContactBookApp(ttk.Frame):
    def __init__(self, root):
        super().__init__(root)
        self.root = root
        self.root.title("Contact Book - Modern Design")
        self.root.geometry("900x650")
        self.root.minsize(850, 600)
        
        # Modern color scheme (2025 trends: Vibrant purple/blue with gradients)
        self.colors = {
            'bg': '#0F172A',           # Dark slate background
            'surface': '#1E293B',       # Card background
            'surface_light': '#334155', # Lighter surface
            'primary': '#6366F1',       # Vibrant indigo
            'primary_dark': '#4F46E5',  # Darker indigo
            'accent': '#EC4899',        # Pink accent
            'success': '#10B981',       # Green
            'text': '#F1F5F9',          # Light text
            'text_secondary': '#94A3B8', # Secondary text
            'border': '#334155',        # Border color
            'hover': '#2D3748'          # Hover state
        }
        
        self.root.configure(bg=self.colors['bg'])
        
        # Load data
        self.contacts = load_contacts()
        
        # Setup UI
        self.setup_styles()
        self.create_widgets()
        self.refresh_treeview()

    def setup_styles(self):
        style = ttk.Style(self.root)
        
        # Use a modern theme as base
        try:
            style.theme_use("clam")
        except:
            pass
        
        # Configure ttk styles with modern colors
        style.configure("TFrame", background=self.colors['bg'])
        style.configure("Card.TFrame", background=self.colors['surface'], relief="flat")
        
        style.configure("TLabel", 
                       background=self.colors['bg'], 
                       foreground=self.colors['text'],
                       font=("Segoe UI", 10))
        
        style.configure("Header.TLabel", 
                       font=("Segoe UI", 22, "bold"),
                       foreground=self.colors['text'],
                       background=self.colors['bg'])
        
        style.configure("SubHeader.TLabel",
                       font=("Segoe UI", 14, "bold"),
                       foreground=self.colors['text'],
                       background=self.colors['surface'])
        
        style.configure("Secondary.TLabel",
                       foreground=self.colors['text_secondary'],
                       font=("Segoe UI", 9))
        
        # Modern entry fields
        style.configure("Modern.TEntry",
                       fieldbackground=self.colors['surface_light'],
                       foreground=self.colors['text'],
                       borderwidth=0,
                       relief="flat",
                       padding=12)
        
        # Notebook (tabs) with modern styling
        style.configure("TNotebook", 
                       background=self.colors['bg'],
                       borderwidth=0,
                       tabmargins=[10, 10, 10, 0])
        
        style.configure("TNotebook.Tab",
                       background=self.colors['surface'],
                       foreground=self.colors['text_secondary'],
                       padding=[20, 12],
                       borderwidth=0,
                       font=("Segoe UI", 10, "bold"))
        
        style.map("TNotebook.Tab",
                 background=[("selected", self.colors['primary'])],
                 foreground=[("selected", "white")])
        
        # Modern Treeview
        style.configure("Modern.Treeview",
                       background=self.colors['surface'],
                       foreground=self.colors['text'],
                       fieldbackground=self.colors['surface'],
                       borderwidth=0,
                       rowheight=35,
                       font=("Segoe UI", 10))
        
        style.configure("Modern.Treeview.Heading",
                       background=self.colors['surface_light'],
                       foreground=self.colors['text'],
                       borderwidth=0,
                       relief="flat",
                       font=("Segoe UI", 10, "bold"))
        
        style.map("Modern.Treeview",
                 background=[("selected", self.colors['primary'])],
                 foreground=[("selected", "white")])

    def create_widgets(self):
        # Main container with padding
        main_container = ttk.Frame(self.root, style="TFrame")
        main_container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Header section with gradient effect
        header_frame = tk.Frame(main_container, bg=self.colors['bg'], height=80)
        header_frame.pack(fill=tk.X, pady=(0, 20))
        header_frame.pack_propagate(False)
        
        # App title with icon
        title_frame = tk.Frame(header_frame, bg=self.colors['bg'])
        title_frame.pack(side=tk.LEFT, fill=tk.Y, pady=15)
        
        icon_label = tk.Label(title_frame, text="📇", font=("Segoe UI", 28), 
                             bg=self.colors['bg'], fg=self.colors['primary'])
        icon_label.pack(side=tk.LEFT, padx=(0, 15))
        
        title_label = ttk.Label(title_frame, text="Contact Manager", style="Header.TLabel")
        title_label.pack(side=tk.LEFT)
        
        # Stats in header
        self.stats_frame = tk.Frame(header_frame, bg=self.colors['surface'], 
                                    highlightbackground=self.colors['border'], 
                                    highlightthickness=1)
        self.stats_frame.pack(side=tk.RIGHT, padx=10, pady=10)
        
        self.total_label = tk.Label(self.stats_frame, text=f"{len(self.contacts)} Contacts",
                                    font=("Segoe UI", 14, "bold"),
                                    bg=self.colors['surface'],
                                    fg=self.colors['primary'])
        self.total_label.pack(padx=20, pady=10)
        
        # Notebook for tabs
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Create tabs
        self.tab_add = ttk.Frame(self.notebook, style="TFrame")
        self.tab_view = ttk.Frame(self.notebook, style="TFrame")
        self.tab_search = ttk.Frame(self.notebook, style="TFrame")
        
        self.notebook.add(self.tab_add, text="✚  Add Contact")
        self.notebook.add(self.tab_view, text="📋  All Contacts")
        self.notebook.add(self.tab_search, text="🔍  Search")
        
        self.create_add_tab()
        self.create_view_tab()
        self.create_search_tab()
        
        # Bottom action bar
        bottom_frame = tk.Frame(main_container, bg=self.colors['surface'],
                               highlightbackground=self.colors['border'],
                               highlightthickness=1, height=60)
        bottom_frame.pack(fill=tk.X, pady=(15, 0))
        bottom_frame.pack_propagate(False)
        
        # Export button with modern styling
        export_btn = ModernButton(bottom_frame, "📤 Export to CSV", 
                                 command=self.on_export_csv,
                                 bg_color=self.colors['success'],
                                 hover_color="#059669",
                                 width=150, height=35)
        export_btn.pack(side=tk.RIGHT, padx=15, pady=12)
        
        status_text = tk.Label(bottom_frame, text="Ready", 
                              font=("Segoe UI", 9),
                              bg=self.colors['surface'],
                              fg=self.colors['text_secondary'])
        status_text.pack(side=tk.LEFT, padx=15)

    # -------------------------
    # Add / Edit Tab
    # -------------------------
    def create_add_tab(self):
        # Card container
        card = tk.Frame(self.tab_add, bg=self.colors['surface'],
                       highlightbackground=self.colors['border'],
                       highlightthickness=1)
        card.pack(fill=tk.BOTH, expand=True, padx=30, pady=30)
        
        content = tk.Frame(card, bg=self.colors['surface'])
        content.pack(fill=tk.BOTH, expand=True, padx=40, pady=30)
        
        # Header
        header = ttk.Label(content, text="Add New Contact", style="SubHeader.TLabel")
        header.pack(anchor="w", pady=(0, 25))
        
        # Form fields with modern design
        fields_frame = tk.Frame(content, bg=self.colors['surface'])
        fields_frame.pack(fill=tk.X, pady=10)
        
        # Name field
        name_frame = self.create_form_field(fields_frame, "👤 Full Name", 0)
        self.entry_name = tk.Entry(name_frame, font=("Segoe UI", 11),
                                   bg=self.colors['surface_light'],
                                   fg=self.colors['text'],
                                   relief="flat", bd=0,
                                   insertbackground=self.colors['text'])
        self.entry_name.pack(fill=tk.X, ipady=10, ipadx=15)
        
        # Phone field
        phone_frame = self.create_form_field(fields_frame, "📱 Phone Number", 1)
        self.entry_phone = tk.Entry(phone_frame, font=("Segoe UI", 11),
                                    bg=self.colors['surface_light'],
                                    fg=self.colors['text'],
                                    relief="flat", bd=0,
                                    insertbackground=self.colors['text'])
        self.entry_phone.pack(fill=tk.X, ipady=10, ipadx=15)
        
        # Email field
        email_frame = self.create_form_field(fields_frame, "✉️ Email Address", 2)
        self.entry_email = tk.Entry(email_frame, font=("Segoe UI", 11),
                                    bg=self.colors['surface_light'],
                                    fg=self.colors['text'],
                                    relief="flat", bd=0,
                                    insertbackground=self.colors['text'])
        self.entry_email.pack(fill=tk.X, ipady=10, ipadx=15)
        
        # Action buttons
        btn_frame = tk.Frame(content, bg=self.colors['surface'])
        btn_frame.pack(fill=tk.X, pady=(30, 10))
        
        add_btn = ModernButton(btn_frame, "➕ Add Contact", 
                              command=self.on_add_contact,
                              bg_color=self.colors['primary'],
                              hover_color=self.colors['primary_dark'],
                              width=160, height=42)
        add_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        update_btn = ModernButton(btn_frame, "✏️ Update Selected",
                                 command=self.on_update_contact,
                                 bg_color=self.colors['accent'],
                                 hover_color="#DB2777",
                                 width=160, height=42)
        update_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        clear_btn = ModernButton(btn_frame, "🗑️ Clear Fields",
                                command=self.clear_add_fields,
                                bg_color=self.colors['surface_light'],
                                hover_color=self.colors['hover'],
                                width=140, height=42)
        clear_btn.pack(side=tk.LEFT)
        
        # Hint
        hint = tk.Label(content, 
                       text="💡 Tip: Select a contact from 'All Contacts' tab and click 'Edit' to modify",
                       font=("Segoe UI", 9, "italic"),
                       bg=self.colors['surface'],
                       fg=self.colors['text_secondary'],
                       wraplength=600)
        hint.pack(anchor="w", pady=(20, 0))
    
    def create_form_field(self, parent, label_text, row):
        field_container = tk.Frame(parent, bg=self.colors['surface'])
        field_container.pack(fill=tk.X, pady=8)
        
        label = tk.Label(field_container, text=label_text,
                        font=("Segoe UI", 10, "bold"),
                        bg=self.colors['surface'],
                        fg=self.colors['text'])
        label.pack(anchor="w", pady=(0, 5))
        
        return field_container

    def clear_add_fields(self):
        self.entry_name.delete(0, tk.END)
        self.entry_phone.delete(0, tk.END)
        self.entry_email.delete(0, tk.END)

    def on_add_contact(self):
        name = normalize_name(self.entry_name.get())
        phone = self.entry_phone.get().strip()
        email = self.entry_email.get().strip()
        
        if not name or not phone:
            messagebox.showwarning("Validation", "Please enter at least Name and Phone.")
            return
        
        for c in self.contacts:
            if c.get("phone") == phone:
                messagebox.showwarning("Duplicate", "A contact with this phone already exists.")
                return
        
        new_contact = {"name": name, "phone": phone, "email": email}
        self.contacts.append(new_contact)
        save_contacts(self.contacts)
        self.refresh_treeview()
        self.clear_add_fields()
        self.update_stats()
        messagebox.showinfo("Success", f"Contact '{name}' added successfully! ✓")

    def on_update_contact(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Select First", "Please select a contact from 'All Contacts' tab.")
            self.notebook.select(self.tab_view)
            return
        
        try:
            idx = int(self.tree.item(selected[0], "text"))
        except Exception:
            messagebox.showerror("Error", "Could not determine the selected contact index.")
            return
        
        name = normalize_name(self.entry_name.get())
        phone = self.entry_phone.get().strip()
        email = self.entry_email.get().strip()
        
        if not name or not phone:
            messagebox.showwarning("Validation", "Please enter at least Name and Phone.")
            return
        
        try:
            self.contacts[idx] = {"name": name, "phone": phone, "email": email}
            save_contacts(self.contacts)
            self.refresh_treeview()
            messagebox.showinfo("Success", "Contact updated successfully! ✓")
        except Exception as e:
            messagebox.showerror("Error", f"Could not update contact: {e}")

    # -------------------------
    # View Tab
    # -------------------------
    def create_view_tab(self):
        container = tk.Frame(self.tab_view, bg=self.colors['bg'])
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Action bar
        action_bar = tk.Frame(container, bg=self.colors['surface'],
                             highlightbackground=self.colors['border'],
                             highlightthickness=1, height=60)
        action_bar.pack(fill=tk.X, pady=(0, 15))
        action_bar.pack_propagate(False)
        
        refresh_btn = ModernButton(action_bar, "🔄 Refresh",
                                  command=self.refresh_treeview,
                                  width=120, height=35)
        refresh_btn.pack(side=tk.LEFT, padx=15, pady=12)
        
        edit_btn = ModernButton(action_bar, "✏️ Edit Selected",
                               command=self.on_edit_load_to_form,
                               bg_color=self.colors['accent'],
                               hover_color="#DB2777",
                               width=140, height=35)
        edit_btn.pack(side=tk.LEFT, padx=(0, 10), pady=12)
        
        delete_btn = ModernButton(action_bar, "🗑️ Delete",
                                 command=self.on_delete_selected,
                                 bg_color="#EF4444",
                                 hover_color="#DC2626",
                                 width=120, height=35)
        delete_btn.pack(side=tk.LEFT, pady=12)
        
        # Treeview container
        tree_container = tk.Frame(container, bg=self.colors['surface'],
                                 highlightbackground=self.colors['border'],
                                 highlightthickness=1)
        tree_container.pack(fill=tk.BOTH, expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(tree_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Treeview
        columns = ("name", "phone", "email")
        self.tree = ttk.Treeview(tree_container, columns=columns, show="headings",
                                style="Modern.Treeview", selectmode="browse",
                                yscrollcommand=scrollbar.set)
        
        self.tree.heading("name", text="👤 Name")
        self.tree.heading("phone", text="📱 Phone")
        self.tree.heading("email", text="✉️ Email")
        
        self.tree.column("name", width=250)
        self.tree.column("phone", width=180)
        self.tree.column("email", width=280)
        
        self.tree.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
        scrollbar.config(command=self.tree.yview)
        
        self.tree.bind("<Double-1>", lambda e: self.on_edit_load_to_form())

    def refresh_treeview(self):
        for row in self.tree.get_children():
            self.tree.delete(row)
        
        for idx, c in enumerate(self.contacts):
            tag = "oddrow" if idx % 2 else "evenrow"
            self.tree.insert("", "end", text=str(idx),
                           values=(c.get("name",""), c.get("phone",""), c.get("email","")),
                           tags=(tag,))
        
        self.tree.tag_configure("oddrow", background=self.colors['surface_light'])
        self.tree.tag_configure("evenrow", background=self.colors['surface'])
        self.update_stats()

    def update_stats(self):
        self.total_label.config(text=f"{len(self.contacts)} Contacts")

    def on_edit_load_to_form(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Select", "Select a contact to edit.")
            return
        
        try:
            idx = int(self.tree.item(selected[0], "text"))
        except Exception:
            messagebox.showerror("Error", "Could not determine selected contact.")
            return
        
        if idx < 0 or idx >= len(self.contacts):
            messagebox.showerror("Error", "Selected contact index out of range.")
            return
        
        contact = self.contacts[idx]
        self.entry_name.delete(0, tk.END)
        self.entry_name.insert(0, contact.get("name",""))
        self.entry_phone.delete(0, tk.END)
        self.entry_phone.insert(0, contact.get("phone",""))
        self.entry_email.delete(0, tk.END)
        self.entry_email.insert(0, contact.get("email",""))
        self.notebook.select(self.tab_add)

    def on_delete_selected(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Select", "Select a contact to delete.")
            return
        
        try:
            idx = int(self.tree.item(selected[0], "text"))
        except Exception:
            messagebox.showerror("Error", "Could not determine the selected contact index.")
            return
        
        if idx < 0 or idx >= len(self.contacts):
            messagebox.showerror("Error", "Selected contact index out of range.")
            return
        
        contact = self.contacts[idx]
        confirm = messagebox.askyesno("Confirm Delete", 
                                     f"Are you sure you want to delete '{contact.get('name')}'?\n\n"
                                     f"This action cannot be undone.")
        if confirm:
            try:
                del self.contacts[idx]
                save_contacts(self.contacts)
                self.refresh_treeview()
                messagebox.showinfo("Deleted", "Contact deleted successfully! ✓")
            except Exception as e:
                messagebox.showerror("Error", f"Could not delete: {e}")

    # -------------------------
    # Search Tab
    # -------------------------
    def create_search_tab(self):
        container = tk.Frame(self.tab_search, bg=self.colors['bg'])
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Search header card
        search_card = tk.Frame(container, bg=self.colors['surface'],
                              highlightbackground=self.colors['border'],
                              highlightthickness=1)
        search_card.pack(fill=tk.X, pady=(0, 15))
        
        search_content = tk.Frame(search_card, bg=self.colors['surface'])
        search_content.pack(fill=tk.X, padx=25, pady=20)
        
        header = ttk.Label(search_content, text="🔍 Search Contacts", style="SubHeader.TLabel")
        header.pack(anchor="w", pady=(0, 15))
        
        # Search bar
        search_frame = tk.Frame(search_content, bg=self.colors['surface'])
        search_frame.pack(fill=tk.X)
        
        self.search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.search_var,
                               font=("Segoe UI", 11),
                               bg=self.colors['surface_light'],
                               fg=self.colors['text'],
                               relief="flat", bd=0,
                               insertbackground=self.colors['text'])
        search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, ipady=10, ipadx=15)
        search_entry.bind("<Return>", lambda e: self.perform_search())
        
        search_btn = ModernButton(search_frame, "🔍 Search",
                                 command=self.perform_search,
                                 width=120, height=42)
        search_btn.pack(side=tk.LEFT, padx=(10, 0))
        
        clear_btn = ModernButton(search_frame, "✖️ Clear",
                                command=self.clear_search_results,
                                bg_color=self.colors['surface_light'],
                                hover_color=self.colors['hover'],
                                width=100, height=42)
        clear_btn.pack(side=tk.LEFT, padx=(10, 0))
        
        # Results container
        results_container = tk.Frame(container, bg=self.colors['surface'],
                                    highlightbackground=self.colors['border'],
                                    highlightthickness=1)
        results_container.pack(fill=tk.BOTH, expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(results_container)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Results treeview
        columns = ("name", "phone", "email")
        self.search_tree = ttk.Treeview(results_container, columns=columns, show="headings",
                                       style="Modern.Treeview",
                                       yscrollcommand=scrollbar.set)
        
        self.search_tree.heading("name", text="👤 Name")
        self.search_tree.heading("phone", text="📱 Phone")
        self.search_tree.heading("email", text="✉️ Email")
        
        self.search_tree.column("name", width=250)
        self.search_tree.column("phone", width=180)
        self.search_tree.column("email", width=280)
        
        self.search_tree.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)
        scrollbar.config(command=self.search_tree.yview)
        
        # Action buttons
        action_frame = tk.Frame(container, bg=self.colors['surface'],
                               highlightbackground=self.colors['border'],
                               highlightthickness=1, height=60)
        action_frame.pack(fill=tk.X, pady=(15, 0))
        action_frame.pack_propagate(False)
        
        edit_btn = ModernButton(action_frame, "✏️ Edit Selected",
                               command=self.on_load_search_to_edit,
                               bg_color=self.colors['accent'],
                               hover_color="#DB2777",
                               width=140, height=35)
        edit_btn.pack(side=tk.LEFT, padx=15, pady=12)
        
        delete_btn = ModernButton(action_frame, "🗑️ Delete Selected",
                                 command=self.on_delete_from_search,
                                 bg_color="#EF4444",
                                 hover_color="#DC2626",
                                 width=150, height=35)
        delete_btn.pack(side=tk.LEFT, pady=12)

    def perform_search(self):
        q = self.search_var.get().strip()
        for row in self.search_tree.get_children():
            self.search_tree.delete(row)
        
        if not q:
            messagebox.showwarning("Input", "Enter search text (name, phone, or email).")
            return
        
        matches = [c for c in self.contacts if contact_matches(c, q)]
        
        for idx, c in enumerate(matches):
            try:
                original_idx = self.contacts.index(c)
            except ValueError:
                original_idx = -1
            
            tag = "oddrow" if idx % 2 else "evenrow"
            self.search_tree.insert("", "end", text=str(original_idx),
                                   values=(c.get("name",""), c.get("phone",""), c.get("email","")),
                                   tags=(tag,))
        
        self.search_tree.tag_configure("oddrow", background=self.colors['surface_light'])
        self.search_tree.tag_configure("evenrow", background=self.colors['surface'])
        
        if not matches:
            messagebox.showinfo("No Results", f"No contacts matched '{q}'.")

    def clear_search_results(self):
        self.search_var.set("")
        for row in self.search_tree.get_children():
            self.search_tree.delete(row)

    def on_load_search_to_edit(self):
        selected = self.search_tree.selection()
        if not selected:
            messagebox.showwarning("Select", "Select a result to edit.")
            return
        
        try:
            idx = int(self.search_tree.item(selected[0], "text"))
        except Exception:
            messagebox.showerror("Error", "Could not determine original contact index.")
            return
        
        if idx < 0 or idx >= len(self.contacts):
            messagebox.showerror("Error", "Original contact not found.")
            return
        
        contact = self.contacts[idx]
        self.entry_name.delete(0, tk.END)
        self.entry_name.insert(0, contact.get("name",""))
        self.entry_phone.delete(0, tk.END)
        self.entry_phone.insert(0, contact.get("phone",""))
        self.entry_email.delete(0, tk.END)
        self.entry_email.insert(0, contact.get("email",""))
        self.notebook.select(self.tab_add)

    def on_delete_from_search(self):
        selected = self.search_tree.selection()
        if not selected:
            messagebox.showwarning("Select", "Select a result to delete.")
            return
        
        try:
            idx = int(self.search_tree.item(selected[0], "text"))
        except Exception:
            messagebox.showerror("Error", "Could not determine original contact index.")
            return
        
        if idx < 0 or idx >= len(self.contacts):
            messagebox.showerror("Error", "Original contact not found.")
            return
        
        contact = self.contacts[idx]
        confirm = messagebox.askyesno("Confirm Delete", 
                                     f"Are you sure you want to delete '{contact.get('name')}'?")
        if confirm:
            try:
                del self.contacts[idx]
                save_contacts(self.contacts)
                self.refresh_treeview()
                self.clear_search_results()
                messagebox.showinfo("Deleted", "Contact deleted successfully! ✓")
            except Exception as e:
                messagebox.showerror("Error", f"Could not delete: {e}")

    def on_export_csv(self):
        if not self.contacts:
            messagebox.showinfo("No Data", "No contacts to export.")
            return
        
        path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files","*.csv"),("All files","*.*")],
            title="Export contacts as CSV"
        )
        
        if not path:
            return
        
        export_contacts_csv(self.contacts, path)

def main():
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
